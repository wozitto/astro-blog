---
import { type CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";
import feedPosts from "../../../content/feeds/posts.json";
import sortCombinedPosts from "@utils/sortCombinedPosts";

export interface Props {
  post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
  const markdownPosts = await getCollection(
    "blog",
    ({ data }) => !data.isDraft
  );
  const combinedPosts: any[] = [
    ...markdownPosts,
    ...feedPosts.map(feedPost => ({
      feedPost,
      slug: feedPost.title,
      type: "feedPost",
    })),
  ];

  const postResult = combinedPosts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));

  const pagePaths = getPageNumbers(combinedPosts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

const markdownPosts = await getCollection("blog");

const combinedPosts = [
  ...markdownPosts.map(post => ({
    ...post.data,
    slug: post.slug,
    type: "post",
  })),
  ...feedPosts.map(feedPost => ({
    ...feedPost,
    type: "feedPost",
  })),
];

const sortedPosts = sortCombinedPosts(combinedPosts);

const pagination = getPagination({
  posts: sortedPosts,
  page: slug,
});
---

{post ? <PostDetails post={post} /> : <Posts {...pagination} />}
